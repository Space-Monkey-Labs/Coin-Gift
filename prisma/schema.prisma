// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  
  // Coinbase specific fields
  coinbaseId    String?   @unique
  walletAddress String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  sentGifts     GiftCard[] @relation("SentGifts")
  claimedGifts  GiftCard[] @relation("ClaimedGifts")
  transactions  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GiftCard {
  id              String    @id @default(cuid())
  code            String    @unique @default(cuid())
  
  // Gift Card Details
  amount          Decimal   @db.Decimal(18, 8)
  cryptocurrency  String    // BTC, ETH, USDC, etc.
  usdValue        Decimal   @db.Decimal(10, 2)
  message         String?   @db.Text
  theme           String    @default("default")
  customImage     String?   // URL to custom image
  
  // Status and Lifecycle
  status          GiftCardStatus @default(PENDING)
  
  // Relationships
  senderId        String
  sender          User      @relation("SentGifts", fields: [senderId], references: [id])
  
  recipientEmail  String?
  claimedBy       String?
  claimedByUser   User?     @relation("ClaimedGifts", fields: [claimedBy], references: [id])
  claimedAt       DateTime?
  
  // Blockchain Data
  transactionHash String?
  blockchainData  Json?     // Store additional blockchain metadata
  
  // Timestamps
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  transactions    Transaction[]
  
  @@index([senderId])
  @@index([recipientEmail])
  @@index([status])
  @@index([claimedBy])
}

enum GiftCardStatus {
  PENDING    // Created but not funded
  FUNDED     // Funded and ready to be claimed
  CLAIMED    // Successfully claimed
  EXPIRED    // Past expiration date
  CANCELLED  // Cancelled by sender
  FAILED     // Failed transaction
}

model Transaction {
  id              String    @id @default(cuid())
  
  // Transaction Details
  hash            String    @unique
  amount          Decimal   @db.Decimal(18, 8)
  cryptocurrency  String
  usdValue        Decimal   @db.Decimal(10, 2)
  status          TransactionStatus
  
  // Related Gift Card
  giftCardId      String?
  giftCard        GiftCard? @relation(fields: [giftCardId], references: [id])
  
  // User who initiated
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Blockchain Data
  blockNumber     Int?
  gasUsed         String?
  gasPaid         Decimal?  @db.Decimal(18, 8)
  
  // Timestamps
  createdAt       DateTime  @default(now())
  confirmedAt     DateTime?
  
  @@index([userId])
  @@index([giftCardId])
  @@index([status])
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}